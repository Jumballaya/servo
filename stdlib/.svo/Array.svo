###
##
#    ARRAYS
##
###


# Map
# Cycle through all of the items in the array and apply the function
let map = fn(arr, f) {
  let iter = fn(arr, acc) {
    if (len(arr) == 0) {
      acc;
    } else {
      iter(rest(arr), push(acc, f(first(arr))))
    }
  };

  iter(arr, [])
};

# Reduce
# Cycle through the array and apply the function with the array item as well as an accumulator
# that is created from the returned value from the last time the function was called in the loop
let reduce = fn(arr, initial, f) {
  let iter = fn(arr, result) {
    if (len(arr) == 0) {
      result
    } else {
      iter(rest(arr), f(result, first(arr)))
    }
  };

  iter(arr, initial)
};

# Filter
# Cycle through the array and apply the function. This only keep the items that make the function
# return true
let filter = fn(arr, f) {
  let iter = fn(arr, acc) {
    if (len(arr) == 0) {
      acc;
    } else {
      if (f(first(arr))) {
        iter(rest(arr), push(acc, first(arr)))
      } else {
        iter(rest(arr), acc)
      }
    }
  };

  iter(arr, [])
};

# Array hash
let Array = {
  "map": map,
  "reduce": reduce,
  "filter": filter,
};
